#!/usr/bin/env python
import string
import optparse
import os.path as osp
import os
import shutil
import ConfigParser as configparser

SERVERS_PATH='servers'

def _prompt(msg, default):
    while 1:
        i = raw_input('%s [%s] ' % (msg, default)) or default
        i = i.lower()
        if i in ['y', 'yes']:
            return True
        elif i in ['n', 'no']:
            return False

def init(name):
    dname = osp.join(SERVERS_PATH, name)
    cname = osp.join(SERVERS_PATH, name+'.conf')
    cp = configparser.ConfigParser()
    # read config file
    cp.readfp(open(cname))
    # check if dir exists
    if osp.isdir(dname):
        # confirm dir reset
        reset = _prompt('Are your sure you want to delete %s?' % dname, 'n')
        if reset:
            print 'Deleting server directories ...',
            shutil.rmtree(dname)
            print 'done'
        else:
            print 'Aborted'
            return
    # create standard folders
    print 'Creating server directories ...',
    os.makedirs(osp.join(dname, 'www', 'libs'), 0755)
    os.makedirs(osp.join(dname, 'services', 'logs'), 0755)
    os.makedirs(osp.join(dname, 'components'), 0755)
    print 'done'
    # get components
    for section in cp.sections():
        print section
    # create symlinks
    # generate nginx config sections
    # prompt to reload supervisord?
    pass

def update(name):
    # read config file
    # get non-existing components
    # create symlinks
    # generate nginx config sections
    # ask to update existing components
    # prompt to reload supervisord?
    pass

def run_from_args():
    usage = "usage: %prog [init|update] [name]"
    parser = optparse.OptionParser(usage=usage)
    (options, args) = parser.parse_args()
    if len(args) < 2:
        parser.print_usage()
    elif args[0] == 'init':
        init(args[1])
    elif args[0] == 'update':
        update(args[1])
    else:
        parser.print_usage()

if __name__ == '__main__':
    run_from_args()